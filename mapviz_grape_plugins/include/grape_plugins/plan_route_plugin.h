// *****************************************************************************
//
// Copyright (c) 2014, Southwest Research Institute速 (SwRI速)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Southwest Research Institute速 (SwRI速) nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// *****************************************************************************

#pragma once


// C++ standard libraries
#include <string>
#include <vector>
#include <mapviz/mapviz_plugin.h>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>
#include <tf/transform_datatypes.h>

// Mapviz libraries
#include <mapviz/map_canvas.h>

// Messages
#include <geometry_msgs/Pose.h>
#include <grape_msgs/RoutePoint.h>

// QT autogenerated files
#include "ui_grape_plan_route.h"

namespace grape_plugins
{
  class PlanRoutePlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

   public:

    PlanRoutePlugin();
    virtual ~PlanRoutePlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown()
    {
    }

    void Draw(double x, double y, double scale);
    void Paint(QPainter* painter, double x, double y, double scale);

    void Transform() {};

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

    bool SupportsPainting()
    {
      return true;
    }

   protected:
    virtual  void PrintError(const std::string& message) override;
    virtual void PrintInfo(const std::string& message) override;
    virtual void PrintWarning(const std::string& message) override;
    virtual bool eventFilter(QObject *object, QEvent* event) override;

    bool handleMousePressRoute(QMouseEvent *);
    bool handleMouseMoveRoute(QMouseEvent *);
    bool handleMouseReleaseRoute(QMouseEvent *);

    bool handleMousePressFence(QMouseEvent *);
    bool handleMouseMoveFence(QMouseEvent *);
    bool handleMouseReleaseFence(QMouseEvent *);

    bool handleKeyPress(QKeyEvent *) ;
    bool handleKeyRelease(QKeyEvent *);


   protected Q_SLOTS:
    void Clear();

  private Q_SLOTS:
    void on_pushButtonRedo_clicked();
    void on_pushButtonUndo_clicked();
    void on_pushButtonLoad_clicked();
    void on_pushButtonSave_clicked();

    void sendButtonPressed();
    void sendPlannedRoute();
    void sendProhibitedLines();

    void on_radio_toggled(bool checked);

  private:

    Ui::grape_plan_route_config ui_;
    QWidget* config_widget_;
    mapviz::MapCanvas* map_canvas_;


    enum PointType { DEPLOYMENT, WAYPOINT, FENCE_BEGIN, FENCE, FENCE_END };

    struct Point2D
    {
      float pos_x;
      float pos_y;
      PointType type;
    };

    int getPointSelected(QPointF gl_point, const std::vector<Point2D> &points);

    std::vector<Point2D> waypoints_;
    std::vector<Point2D> fences_;

    enum FileType { ROUTE_FILE, FENCE_FILE};

    struct RouteState{
        std::vector<Point2D> wp;
        std::vector<Point2D> fn;
    };

    std::list< RouteState > undo_stack_;
    std::list< RouteState > redo_stack_;

    Point2D* selected_point_;
    bool is_mouse_down_;
    bool building_fence_;
    QPointF mouse_down_pos_;
    qint64 mouse_down_time_;
    QPointF sticky_fence_end_;

    qint64 max_ms_;
    qreal max_distance_;
    bool CTRL_pressed_; 

    void saveToUndoStack();

    QPointF toGLCanvas(const Point2D &point);

    ros::NodeHandle node_;
    ros::ServiceClient planned_route_client_;
    ros::Publisher fence_publisher_;
  };
}


